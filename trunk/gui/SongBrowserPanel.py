# -*- coding: iso-8859-1 -*-
# generated by wxGlade 0.5 on Sun May 13 11:47:41 2007 from D:\personal\src\GuitarPortfolio\branches\db_revival\gui\guitarportfolio.wxg

import wx
import wx.html as html
import time

from wx.lib.pubsub import Publisher
from objs import signals, songs, songfilter
from images import icon_home, icon_browse_next, icon_browse_prev
import HtmlInfoGen

# TODO: Put the text inside the DB!
startupinfo = """
<html><body>
<font size="16">GuitarPortfolio v1.0</font><br>
Created by Jorgen Bodde<br><br>

GuitarPortfolio is a songs collection manager application that can keep track of the songs you are 
practicing and the progress you are making. Some features are;<br><br>

<ul>
<li>Storing song background information</li>
<li>Storing links to sites or external files</li>
<li>Storing attachments inside the database like MP3's, AVI's or PDF's</li>
<li>Storing multiple music tabs</li>
<li>Keeping track of your progress bar by bar</li>
<li>A study log, with time tracking to see when you studied what songs</li>
<li>And much more!</li>
</ul><br><br>

The reason why this application is written, is to maintain a list of songs I am already able to play, 
and songs which are still a bit hard, but when time progresses could get into my reach. For example,
whenever you hear a nice song on the radio, you can place an entry in GuitarPortfolio and when you have 
the time, play it or investigate it. <br><br>

Have fun playing!
</body></html>
"""

# TODO: Substitute version number / appname in HTML text
# TODO: Put inside the DB!

songinfo = """<html><body>
<font color="#000080" size="+4"><em><strong>@song@</strong></em></font><br>
<font size="+2">By @artist@</font><br><br>

<table>
<tr><td><b>Date:</b></td><td>@ldate@ (@sdate@)</td></tr>
<tr><td><b>Category:</b></td><td>@categories@</td></tr>
<tr><td><b>Tuning:</b></td><td>@tuning_text@ (@tuning_name@)</td></tr>
<tr><td><b>Progress:</b></td><td>@cprogress@ (@percprogress@%)</td></tr>
</table>
</body></html>
"""

# begin wxGlade: dependencies
# end wxGlade

class SongBrowserWindow(html.HtmlWindow):
    def __init__(self, parent, id):
        html.HtmlWindow.__init__(self, parent, id, style = wx.NO_FULL_REPAINT_ON_RESIZE)
        if "gtk2" in wx.PlatformInfo:
            self.SetStandardFonts()
            
        self.SetPage(startupinfo)
        
    # --------------------------------------------------------------------------
    def __OnSelectSong(self, message):
        """ Select signal when a new song is selected by SongList, we react on it """
        # replace all items and display text
        if message.data == None:
            self.SetPage(startupinfo)
        else:                   
            self.SetPage(HtmlInfoGen.GenerateHtmlFromSong(template = songinfo, 
                                                          song = message.data))
class SongBrowserPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SongBrowserPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.__songList = wx.Choice(self, -1, choices=[])
        self.__homeButton = wx.BitmapButton(self, -1, wx.NullBitmap)
        self.__browseBack = wx.BitmapButton(self, -1, wx.NullBitmap)
        self.__browseForward = wx.BitmapButton(self, -1, wx.NullBitmap)
        self.__songBrowser = SongBrowserWindow(self, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHOICE, self.__OnSongSelect, self.__songList)
        # end wxGlade

        # signals for song selection dropdown
        Publisher().subscribe(self.__AddSong, signals.SONG_DB_ADDED)  
        Publisher().subscribe(self.__UpdateSong, signals.SONG_DB_UPDATED)  
        Publisher().subscribe(self.__DeleteSong, signals.SONG_DB_DELETED)  
        Publisher().subscribe(self.__ClearSongs, signals.APP_CLEAR)  
        Publisher().subscribe(self.__OnSongSelected, signals.SONG_VIEW_SELECTED)  
                
        # add some nice buttons
        self.__homeButton.SetBitmapLabel(icon_home.getBitmap())
        self.__browseBack.SetBitmapLabel(icon_browse_prev.getBitmap())
        self.__browseForward.SetBitmapLabel(icon_browse_next.getBitmap())
        
    # --------------------------------------------------------------------------
    def __set_properties(self):
        # begin wxGlade: SongBrowserPanel.__set_properties
        self.__homeButton.SetMinSize((25, 25))
        self.__browseBack.SetMinSize((25, 25))
        self.__browseForward.SetMinSize((25, 25))
        # end wxGlade

    # --------------------------------------------------------------------------
    def __do_layout(self):
        # begin wxGlade: SongBrowserPanel.__do_layout
        sizer_30 = wx.BoxSizer(wx.VERTICAL)
        sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_31.Add(self.__songList, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_31.Add(self.__homeButton, 0, wx.ALL, 5)
        sizer_31.Add(self.__browseBack, 0, wx.ALL, 5)
        sizer_31.Add(self.__browseForward, 0, wx.ALL, 5)
        sizer_30.Add(sizer_31, 0, wx.EXPAND, 0)
        sizer_30.Add(self.__songBrowser, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_30)
        sizer_30.Fit(self)
        # end wxGlade

    # --------------------------------------------------------------------------
    def __AddSong(self, message):
        # TODO: Sort the items in the choice
        sl = self.__songList
        idx = sl.Append(message.data._title)
        sl.SetClientData(idx, message.data)
        
    # --------------------------------------------------------------------------
    def __DeleteSong(self, message):
        sl = self.__songList
        for i in xrange(0, sl.GetCount()):
            if sl.GetClientData(i) == message.data:
                sl.Delete(i)
                
    # --------------------------------------------------------------------------
    def __UpdateSong(self, message):
        sl = self.__songList
        for i in xrange(0, sl.GetCount()):
            if sl.GetClientData(i) == message.data:
                sl.SetString(i, message.data._title)
    
    # --------------------------------------------------------------------------
    def __ClearSongs(self, message):
        """ Clear list, we are changing databases """
        self.__songList.Clear()

    def __OnSongSelect(self, event): # wxGlade: SongBrowserPanel.<event_handler>
        """ User selects a song, we set the song filter and the other
            components should show the proper info """
        idx = self.__songList.GetSelection()
        if idx <> wx.NOT_FOUND:
            s = self.__songList.GetClientData(idx)
            songfilter.Get().SelectSong(s._id)

    def __OnSongSelected(self, message):
        """ Another song is selected, sync our list """
        # if we already stand on the song, we do nothing
        sl = self.__songList
        idx = sl.GetSelection()
        if idx <> wx.NOT_FOUND:
            if message.data == self.__songList.GetClientData(idx):
                return

        for i in xrange(0, sl.GetCount()):
            if sl.GetClientData(i) == message.data:
                sl.SetSelection(i)
                return

# end of class SongBrowserPanel


