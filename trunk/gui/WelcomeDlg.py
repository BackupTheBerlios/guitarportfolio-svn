# -*- coding: iso-8859-1 -*-
# generated by wxGlade 0.5 on Sun May 13 11:47:41 2007 from D:\personal\src\GuitarPortfolio\branches\db_revival\gui\guitarportfolio.wxg

import os.path

import wx

from images import side_art
import appcfg
import db.engine

# begin wxGlade: dependencies
# end wxGlade

class WelcomeDlg(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: WelcomeDlg.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.__guitarBmp = wx.StaticBitmap(self, -1, wx.NullBitmap, style=wx.SIMPLE_BORDER)
        self.label_29 = wx.StaticText(self, -1, "Guitar Portfolio Database Wizard")
        self.static_line_5 = wx.StaticLine(self, -1)
        self.label_30 = wx.StaticText(self, -1, "Please select what you want to do ...")
        self.__createDatabase = wx.RadioButton(self, -1, "Create database")
        self.__locationList = wx.Choice(self, -1, choices=["On Default Location", "On Custom Location ..."])
        self.__includeDemoData = wx.CheckBox(self, -1, "Include Demo Data")
        self.__findDatabase = wx.RadioButton(self, -1, "Find your database on disk")
        self.__useDefaultLocation = wx.CheckBox(self, -1, "Try default name and location first")
        self.__closeButton = wx.Button(self, wx.ID_EXIT, "")
        self.__nextButton = wx.Button(self, -1, "&NEXT >")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.__OnTryDefaultName, self.__useDefaultLocation)
        self.Bind(wx.EVT_BUTTON, self.__OnClose, self.__closeButton)
        self.Bind(wx.EVT_BUTTON, self.__OnNext, self.__nextButton)
        # end wxGlade

        self.__guitarBmp.SetBitmap(side_art.getBitmap())

    #---------------------------------------------------------------------------
    def __set_properties(self):
        # begin wxGlade: WelcomeDlg.__set_properties
        self.SetTitle("Welcome To GuitarPortfolio")
        self.SetSize((529, 294))
        self.__guitarBmp.SetMinSize((100, 216))
        self.label_29.SetFont(wx.Font(13, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_30.SetMinSize((-1, -1))
        self.__locationList.SetSelection(0)
        self.__includeDemoData.Enable(False)
        # end wxGlade

    #---------------------------------------------------------------------------
    def __do_layout(self):
        # begin wxGlade: WelcomeDlg.__do_layout
        sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37 = wx.BoxSizer(wx.VERTICAL)
        sizer_38 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_4 = wx.FlexGridSizer(8, 2, 0, 0)
        sizer_33 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_36.Add(self.__guitarBmp, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_39.Add((55, 25), 0, 0, 0)
        sizer_39.Add(self.label_29, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 5)
        sizer_37.Add(sizer_39, 0, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_37.Add(self.static_line_5, 0, wx.ALL|wx.EXPAND, 5)
        sizer_37.Add((20, 30), 0, 0, 0)
        sizer_37.Add(self.label_30, 0, wx.ALL, 5)
        grid_sizer_4.Add((40, 25), 0, 0, 0)
        grid_sizer_4.Add(self.__createDatabase, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_4.Add((40, 25), 0, 0, 0)
        sizer_32.Add((30, 25), 0, 0, 0)
        sizer_32.Add(self.__locationList, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM, 5)
        sizer_32.Add(self.__includeDemoData, 0, wx.ALL, 5)
        grid_sizer_4.Add(sizer_32, 1, wx.EXPAND, 0)
        grid_sizer_4.Add((40, 25), 0, 0, 0)
        grid_sizer_4.Add(self.__findDatabase, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_4.Add((40, 25), 0, 0, 0)
        sizer_33.Add((30, 20), 0, 0, 0)
        sizer_33.Add(self.__useDefaultLocation, 0, wx.ALL, 5)
        grid_sizer_4.Add(sizer_33, 1, wx.EXPAND, 0)
        grid_sizer_4.Add((40, 25), 0, 0, 0)
        sizer_37.Add(grid_sizer_4, 0, wx.EXPAND, 0)
        sizer_38.Add(self.__closeButton, 0, wx.ALL, 5)
        sizer_38.Add(self.__nextButton, 0, wx.ALL, 5)
        sizer_37.Add(sizer_38, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_36.Add(sizer_37, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_36)
        self.Layout()
        # end wxGlade

    #---------------------------------------------------------------------------
    def __OnClose(self, event): # wxGlade: WelcomeDlg.<event_handler>
        if not db.engine.Get().IsOpened():
            res = wx.MessageBox('A valid database needs to be present before continuing.\n' + \
                               'GuitarPortfolio will be closed if none is selected', 
                               'Error', wx.ICON_HAND | wx.OK | wx.CANCEL)
            if res == wx.OK:        
                self.EndModal(wx.ID_CLOSE)
        else:
            self.EndModal(wx.ID_OK)

    #---------------------------------------------------------------------------
    def __OnNext(self, event): # wxGlade: WelcomeDlg.<event_handler>
        
        # create a database
        if self.__createDatabase.GetValue():
            self.__DoCreateDatabase()
        elif self.__findDatabase.GetValue():
            self.__DoFindDatabase()
        event.Skip()

    #---------------------------------------------------------------------------
    def __DoCreateDatabase(self):
        
        # determine the path where we will create the DB
        dbpath = ''
        if self.__locationList.GetSelection() == 0:
            dbpath = os.path.join(wx.StandardPaths.Get().GetUserDataDir(), appcfg.DBNAME)
        else:
            dlg = wx.FileDialog(None, 
                                message = 'Select database path', 
                                defaultFile = appcfg.DBNAME,
                                wildcard = 'SQLite3 Database (*.db)|*.db|All files (*.*)|*.*', 
                                style = wx.SAVE)
            if dlg.ShowModal() == wx.ID_OK:
                dbpath = dlg.GetPath()
            dlg.Destroy()            

        # only continue when we have a valid path
        if dbpath:
            
            # if we have a db present, tell the user to either remove it or
            # change the location.
            if os.path.exists(dbpath):
                wx.MessageBox('A file already exists on the following location:\n' +
                              '%s\n' % (dbpath,) + \
                              '\nPlease remove or specify a new name or alternate location.', 
                              'Error', wx.ICON_HAND | wx.OK)
                return

            dbe = db.engine.Get()
            status = dbe.Create(dbpath)   
            if status <> db.engine.DB_OPEN_OK:
                
                # errors! we are going to notify the user
                if status in [db.engine.DB_NOT_FOUND, db.engine.DB_CREATE_ERROR]:
                    wx.MessageBox('Creating of the database unsuccesful on the following location:' + \
                                  '%s' % (dbpath,), 'Create error', wx.ICON_HAND | wx.OK)
                
                else:
                    wx.MessageBox('An unexpected error occured. Please contact the author' + \
                                  "Message is: '%s'" % (db.engine.error_string[status],), 
                                  'Error', wx.ICON_HAND | wx.OK)
                
                
                return
            
            # TODO: we need to insert some demo code!
            
            # ok succes, we bail out
            wx.MessageBox('Database creation succesful!', 'Success!', wx.ICON_INFORMATION | wx.OK)
            appcfg.Get().Write(appcfg.CFG_DBPATH, dbpath)
            self.EndModal(wx.ID_OK)                
            
    #---------------------------------------------------------------------------
    def __DoFindDatabase(self):
        
        # determine the path where we will find
        dbpath = ''
        dofind = True
        if self.__useDefaultLocation.GetValue():
            dbpath = os.path.join(wx.StandardPaths.Get().GetUserDataDir(), appcfg.DBNAME)
            dofind = not os.path.isfile(dbpath)
                
        if dofind:
            dbpath = ''
            dlg = wx.FileDialog(None, 
                                message = 'Select database path', 
                                defaultFile = appcfg.DBNAME,
                                wildcard = 'SQLite3 Database (*.db)|*.db|All files (*.*)|*.*', 
                                style = wx.OPEN)
            if dlg.ShowModal() == wx.ID_OK:
                dbpath = dlg.GetPath()
            dlg.Destroy()                    
        
        if dbpath:        
            # check if we have a DB there
            dbe = db.engine.Get()
            status = dbe.Open(dbpath)           
            
            if status <> db.engine.DB_OPEN_OK:
            
                # sigh, more errors.
                if status in db.engine.db_problems:
                    wx.MessageBox('Opening of the database unsuccesful on the following location:' + \
                                  '%s' % (dbpath,), 'Open error', wx.ICON_HAND | wx.OK)
                
                elif status == db.engine.DB_TOO_NEW:
                    wx.MessageBox('The database has a higher version then supported by this application', 
                                  'Open Error', wx.ICON_HAND | wx.OK)
                elif status == db.engine.DB_UPGRADE_NEEDED:
                    res = wx.MessageBox('The database needs to be upgraded. Press YES to upgrade, NO to cancel', 
                                        'Upgrade needed', wx.ICON_INFORMATION | wx.YES | wx.NO)
                    if res == wx.YES:
                        self.__DoUpgradeDatabase(dbpath)
                return
            else:
                appcfg.Get().Write(appcfg.CFG_DBPATH, dbpath)
                self.EndModal(wx.ID_OK)                
                        
    #---------------------------------------------------------------------------
    def __DoUpgradeDatabase(self, dbpath):
        wx.MessageBox("No upgrades possible at this point. " + \
                      "Hey, it's only the first release you know! ;-)", "Error", wx.ICON_HAND | wx.OK)
        pass

    def __OnTryDefaultName(self, event): # wxGlade: WelcomeDlg.<event_handler>
        self.__findDatabase.SetValue(True)

# end of class WelcomeDlg


