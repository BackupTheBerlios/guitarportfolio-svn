# -*- coding: iso-8859-1 -*-
# generated by wxGlade 0.5 on Sun May 13 11:47:41 2007 from D:\personal\src\GuitarPortfolio\branches\db_revival\gui\guitarportfolio.wxg

import wx
import wx.xrc as xrc
from wx.lib.pubsub import Publisher

from objs import songfilter
from db import songs_peer
import db.engine
import xmlres, viewmgr

class InfoPanel(wx.Panel):
    def __init__(self, parent, id = -1):
        pre = wx.PrePanel()
        xmlres.Res().LoadOnPanel(pre, parent, "SongInfoEditPanel")
        self.PostCreate(pre)

        self.__infoEdit = xrc.XRCCTRL(self, "ID_SONG_EDIT")
        self.__applySelection = xrc.XRCCTRL(self, "ID_ACTION_SELECT")
        self.__applyToDB = xrc.XRCCTRL(self, "wxID_APPLY")

        self.Bind(wx.EVT_BUTTON, self.__OnApply, self.__applyToDB)

        Publisher().subscribe(self.__OnSongSelected, viewmgr.SIGNAL_SONG_SELECTED)
        Publisher().subscribe(self.__OnSongSelected, viewmgr.SIGNAL_CLEAR_DATA)

        self.__applySelection.SetSelection(0)

    #---------------------------------------------------------------------------
    def __OnSongSelected(self, message):
        """ We received an select signal for the song """
        # en/disable the view
        song = message.data
        self.__infoEdit.Enable(song <> None)
        self.__applySelection.Enable(song <> None)
        self.__applyToDB.Enable(song <> None)
        if song:
            self.__infoEdit.SetValue(song._information)
        else:
            self.__infoEdit.SetValue('')

    #---------------------------------------------------------------------------
    def __OnApply(self, event):
        """ Revert or apply the text. Revert will restore the information from the class
            else it will store the information in the database and update all views """
        s = songfilter.Get()._selectedSong        
        if self.__applySelection.GetSelection() == 0:
            s._information = self.__infoEdit.GetValue()

            # write the song to the database
            sp = songs_peer.SongPeer(db.engine.GetDb())
            sp.Update(s)
            
            # issue an update signal of the song
            viewmgr.signalSongUpdated(s)
        else:
            # revert
            self.__infoEdit.SetValue(s._information)
            
        # always revert to save action
        self.__applySelection.SetSelection(0)        


