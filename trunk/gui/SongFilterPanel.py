# -*- coding: iso-8859-1 -*-
# generated by wxGlade 0.5 on Sun May 13 11:47:41 2007 from D:\personal\src\GuitarPortfolio\branches\db_revival\gui\guitarportfolio.wxg

import wx
import wx.xrc as xrc
from wx.lib.pubsub import Publisher

from objs import songs, songfilter
import appcfg, xmlres
import viewmgr

class SongFilterPanel(wx.Panel):
    def __init__(self, parent, id = -1):
        pre = wx.PrePanel()
        xmlres.Res().LoadOnPanel(pre, parent, "SongFilterPanel")
        self.PostCreate(pre)

        # get controls
        self.__progressFilter = xrc.XRCCTRL( self, "ID_PROGRESS" )
        self.__difficulty = xrc.XRCCTRL( self, "ID_DIFFICULTY" )
        self.__strictDifficulty = xrc.XRCCTRL( self, "ID_SHOW_LOWER_DIFFICULTY" )
        self.__cats = xrc.XRCCTRL( self, "ID_CATEGORIES" )
        self.__categoriesAndFilter = xrc.XRCCTRL(self, "ID_CAT_ANDFILTER")
        self.__onlyShowTutorials = xrc.XRCCTRL(self, "ID_RADIO_TUTONLY")
        self.__onlyShowSongs = xrc.XRCCTRL(self, "ID_RADIO_SONGONLY")
        self.__onlyShowAll = xrc.XRCCTRL(self, "ID_RADIO_ALL")

        # bind events
        self.Bind(wx.EVT_CHOICE, self.__OnFilterSongs, self.__progressFilter)
        self.Bind(wx.EVT_CHOICE, self.__OnSelectDifficulty, self.__difficulty)
        self.Bind(wx.EVT_CHECKBOX, self.__OnShowMatchingLowerDifficulty, self.__strictDifficulty)
        self.Bind(wx.EVT_CHECKBOX, self.__OnShowCategoriesAND, self.__categoriesAndFilter)
        self.Bind(wx.EVT_CHECKLISTBOX, self.__OnItemChecked, self.__cats)       
        self.Bind(wx.EVT_RADIOBUTTON, self.__OnOnlyShow, self.__onlyShowTutorials) 
        self.Bind(wx.EVT_RADIOBUTTON, self.__OnOnlyShow, self.__onlyShowSongs) 
        self.Bind(wx.EVT_RADIOBUTTON, self.__OnOnlyShow, self.__onlyShowAll) 
        
        # bind signals
        Publisher().subscribe(self.__OnChangeCats, viewmgr.SIGNAL_SONG_UPDATED)
        Publisher().subscribe(self.__OnChangeCats, viewmgr.SIGNAL_SONG_DELETED)
        Publisher().subscribe(self.__OnChangeCats, viewmgr.SIGNAL_SONG_ADDED)
        Publisher().subscribe(self.__OnAppReady, viewmgr.SIGNAL_DATA_RESTORED)
        Publisher().subscribe(self.__OnClear, viewmgr.SIGNAL_CLEAR_DATA)

        # init controls
        self.__progressFilter.SetSelection(0)
        self.__difficulty.SetSelection(0)
        
    #---------------------------------------------------------------------------
    def __OnFilterSongs(self, event): 
        crits = [songfilter._CRIT_STATUS_ALL, 
                 songs.SS_STARTED, 
                 songs.SS_POSTPONED, 
                 songs.SS_COMPLETED, 
                 songs.SS_NOT_STARTED]
        idx = self.__progressFilter.GetSelection()
        songfilter.Get().ChangeStatusCriteria(crits[idx])
        appcfg.Get().WriteInt(appcfg.CFG_PROGRESS, idx)

    #---------------------------------------------------------------------------
    def __OnSelectDifficulty(self, event): 
        crits = [songfilter._CRIT_STATUS_ALL, 
                 songs.SD_EASY,
                 songs.SD_NORMAL,
                 songs.SD_INTERMEDIATE,
                 songs.SD_ADVANCED,
                 songs.SD_HARD,
                 songs.SD_IMPOSSIBLE]
        idx = self.__difficulty.GetSelection()
        songfilter.Get().ChangeDifficultyCriteria(crits[idx])
        appcfg.Get().WriteInt(appcfg.CFG_DIFFICULTY, idx)

    #---------------------------------------------------------------------------
    def __OnChangeCats(self, message):
        self.__PopulateCategories()
       
    #---------------------------------------------------------------------------
    def __PopulateCategories(self):
        """ Fill checklisbox with only the categories being used, keep some kind
            of shadow check state because the stupid wx.CheckListCtrl hogs the 
            client data. Bad design really gets my blood boiling """
            
        self.__cats.Clear()
        self.__catsClientData = []
        cats = songfilter.Get().GetUsedCategories()
        criteria = songfilter.Get()._critCategories
        for c in cats:
            idx = self.__cats.Append(c._name)
            # keep a list of associated data
            self.__catsClientData.append(c)
            self.__cats.Check(idx, c in criteria)
                       
    #---------------------------------------------------------------------------
    def __OnItemChecked(self, event):
        # compose list of checked items
        selcats = []
        for i in xrange(self.__cats.GetCount()):
            if self.__cats.IsChecked(i):
                selcats.append(self.__catsClientData[i])
        songfilter.Get().ChangeCategoriesCriteria(selcats)

    #---------------------------------------------------------------------------
    def __OnShowMatchingLowerDifficulty(self, event): 
        chk = self.__strictDifficulty.GetValue()
        songfilter.Get().ChangeDifficultyCriteriaLO(chk)
        appcfg.Get().WriteInt(appcfg.CFG_LOWERDIFFICULTY, 1 if chk else 0)

    #---------------------------------------------------------------------------
    def __OnShowCategoriesAND(self, event):
        chk = self.__categoriesAndFilter.GetValue()
        songfilter.Get().ChangeCategoriesCriteriaAND(chk)
        appcfg.Get().WriteInt(appcfg.CFG_CATEGORIESAND, 1 if chk else 0)

    #---------------------------------------------------------------------------
    def __OnOnlyShow(self, event):
        val = songfilter.SHOW_ALL
        if self.__onlyShowTutorials.GetValue():
            val = songfilter.SHOW_TUTORIALS
        elif self.__onlyShowSongs.GetValue():
            val = songfilter.SHOW_SONGS
        
        songfilter.Get().OnlySnowType(val)
        appcfg.Get().WriteInt(appcfg.CFG_SHOWONLYTUTS, val)
        
    #---------------------------------------------------------------------------
    def __OnAppReady(self, message):
        """ App is ready with data, we can initialize our last viewstate """
        cfg = appcfg.Get()
        if cfg.HasGroup('filter'):
            # read the difficulty
            idx = cfg.ReadInt(appcfg.CFG_DIFFICULTY, 0)
            self.__difficulty.SetSelection(idx)
            self.__OnSelectDifficulty(event = None)
            
            # read the song status
            idx = cfg.ReadInt(appcfg.CFG_PROGRESS, 0)
            self.__progressFilter.SetSelection(idx)
            self.__OnFilterSongs(event = None)
            
            # categories AND
            self.__categoriesAndFilter.SetValue(True if cfg.ReadInt(appcfg.CFG_CATEGORIESAND, 0) <> 0 else False)
            self.__OnShowCategoriesAND(event = None)
            # lower difficulty
            self.__strictDifficulty.SetValue(True if cfg.ReadInt(appcfg.CFG_LOWERDIFFICULTY, 0) <> 0 else False)
            self.__OnShowMatchingLowerDifficulty(event = None)
            # show tutorials, songs or both
            val = cfg.ReadInt(appcfg.CFG_SHOWONLYTUTS, songfilter.SHOW_ALL)
            if val == songfilter.SHOW_SONGS:
                self.__onlyShowSongs.SetValue(True)
            elif val == songfilter.SHOW_TUTORIALS:
                self.__onlyShowTutorials.SetValue(True)
            else:
                self.__onlyShowAll.SetValue(True)
            self.__OnOnlyShow(event = None)
        
        self.__PopulateCategories()

    #---------------------------------------------------------------------------
    def __OnClear(self, message):
        """ Clear the views, a DB change is probably in order """
        self.__cats.Clear()
        self.__catsClientData = []
        


        
